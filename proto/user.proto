syntax = "proto3";

package user;

import "google/api/annotations.proto";

import "access_policy.proto";
import "shared.proto";

service UserService {
  rpc CreateUser(CreateUserRequest) returns (UserResponse) {
    option (google.api.http) = {
      post : "/api/v1/developer/users"
      body : "*"
    };
  }

  rpc UpdateUser(UpdateUserRequest) returns (UserResponse) {
    option (google.api.http) = {
      put : "/api/v1/developer/users/{id}"
      body : "*"
    };
  }

  rpc FetchUser(FetchUserRequest) returns (UserResponse) {
    option (google.api.http) = {
      get : "/api/v1/developer/users/{id}"
    };
  }

  rpc FetchAllUsers(FetchAllUsersRequest) returns (UsersResponse) {
    option (google.api.http) = {
      get : "/api/v1/developer/users/users"
    };
  }

  rpc AssignUserAccessPolicy(AssignUserAccessPolicyRequest)
      returns (shared.StatusCodeResponse) {
    option (google.api.http) = {
      put : "/api/v1/developer/users/{id}/access_policies"
      body : "*"
    };
  }

  rpc AssignUserNfcCard(AssignUserNfcCardRequest)
      returns (shared.StatusCodeResponse) {
    option (google.api.http) = {
      put : "/api/v1/developer/users/{id}/nfc_cards"
      body : "*"
    };
  }

  rpc UnassignUserNfcCard(UnassignUserNfcCardRequest)
      returns (shared.StatusCodeResponse) {
    option (google.api.http) = {
      delete : "/api/v1/developer/users/{id}/nfc_cards/delete"
    };
  }

  rpc AssignUserPinCode(AssignUserPinCodeRequest)
      returns (shared.StatusCodeResponse) {
    option (google.api.http) = {
      put : "/api/v1/developer/users/{id}/pin_codes"
      body : "*"
    };
  }

  rpc UnassignUserPinCode(UnassignUserPinCodeRequest)
      returns (shared.StatusCodeResponse) {
    option (google.api.http) = {
      delete : "/api/v1/developer/users/{id}/unassign-nfc-card"
    };
  }

  rpc CreateUserGroup(CreateUserGroupRequest)
      returns (shared.StatusCodeResponse) {
    option (google.api.http) = {
      post : "/api/v1/developer/user_groups"
      body : "*"
    };
  }

  rpc FetchAllUserGroups(FetchAllUserGroupsRequest)
      returns (UserGroupsResponse) {
    option (google.api.http) = {
      get : "/api/v1/developer/user_groups"
    };
  }

  rpc FetchUserGroups(FetchUserGroupRequest) returns (UserGroupResponse) {
    option (google.api.http) = {
      get : "/api/v1/developer/user_groups/{id}"
    };
  }

  rpc UpdateUserGroup(UpdateUserGroupRequest)
      returns (shared.StatusCodeResponse) {
    option (google.api.http) = {
      put : "/api/v1/developer/user_groups/{id}"
      body : "*"
    };
  }

  rpc DeleteUserGroup(DeleteUserGroupRequest)
      returns (shared.StatusCodeResponse) {
    option (google.api.http) = {
      delete : "/api/v1/developer/user_groups/{id}"
    };
  }

  rpc AssignUserToUserGroup(AssignUserToUserGroupRequest)
      returns (shared.StatusCodeResponse) {
    option (google.api.http) = {
      post : "/api/v1/developer/user_groups/{id}/users"
      body : "*"
    };
  }

  rpc UnassignUserFromUserGroup(UnassignUserFromUserGroupRequest)
      returns (shared.StatusCodeResponse) {
    option (google.api.http) = {
      post : "/api/v1/developer/user_groups/{id}/user/delete"
      body : "*"
    };
  }

  rpc FetchUsersInUserGroup(FetchUsersInUserGroupRequest)
      returns (UsersResponse) {
    option (google.api.http) = {
      get : "/api/v1/developer/user_groups/{id}/users"
    };
  }

  rpc FetchAllUsersInUserGroup(FetchAllUsersInUserGroupRequest)
      returns (UsersResponse) {
    option (google.api.http) = {
      get : "/api/v1/developer/user_groups/{id}/users/all"
    };
  }

  rpc FetchUserAccessPolicies(FetchUserAccessPoliciesRequest)
      returns (access_policy.AccessPoliciesResponse) {
    option (google.api.http) = {
      get : "/api/v1/developer/users/{id}/access_policies"
    };
  }

  rpc AssignUserGroupAccessPolicy(AssignUserGroupAccessPolicyRequest)
      returns (UserGroupResponse) {
    option (google.api.http) = {
      put : "/api/v1/developer/user_groups/{id}/access_policies"
      body : "*"
    };
  }

  rpc FetchUserGroupAccessPolicies(FetchUserGroupAccessPoliciesRequest)
      returns (access_policy.AccessPoliciesResponse) {
    option (google.api.http) = {
      get : "/api/v1/developer/user_groups/{id}/access_policies"
    };
  }
}

// 3.2 User Registration
message CreateUserRequestPath {}
message CreateUserRequestParams {}
message CreateUserRequestBody {
  string first_name = 1;
  string last_name = 2;
  string user_email = 3;
  string employee_number = 4;
  int64 onboard_time = 5;
}
message CreateUserRequest {
  CreateUserRequestPath path = 1;
  CreateUserRequestParams params = 2;
  CreateUserRequestBody body = 3;
}

// 3.3 Update User
message UpdateUserRequestPath { string id = 1; }
message UpdateUserRequestParams {}
message UpdateUserRequestBody {
  string first_name = 1;
  string last_name = 2;
  string user_email = 3;
  string employee_number = 4;
  int64 onboard_time = 5;
  Status status = 6;
}
message UpdateUserRequest {
  UpdateUserRequestPath path = 1;
  UpdateUserRequestParams params = 2;
  UpdateUserRequestBody body = 3;
}

// 3.4 Fetch User
message FetchUserRequestPath { string id = 1; }
message FetchUserRequestParams {
  bool expand =
      1; // Whether to expand the access_policy field. If true, your app must
         // include "expand[]=access_policy" in the request URL paramters
}
message FetchUserRequestBody {}
message FetchUserRequest {
  FetchUserRequestPath path = 1;
  FetchUserRequestParams params = 2;
  FetchUserRequestBody body = 3;
}

// 3.5 Fetch All Users
message FetchAllUsersRequestPath {}
message FetchAllUsersRequestParams {
  bool expand =
      1; // Whether to expand the access_policy field. If true, your app must
         // include "expand[]=access_policy" in the request URL paramters
  string page_num = 2;  // Current page number in the pagination
  string page_size = 3; // Number of users per page.
}
message FetchAllUsersRequestBody {}
message FetchAllUsersRequest {
  FetchAllUsersRequestPath path = 1;
  FetchAllUsersRequestParams params = 2;
  FetchAllUsersRequestBody body = 3;
}

// 3.6 Assign Access Policies to User
message AssignUserAccessPolicyRequestPath { string id = 1; }
message AssignUserAccessPolicyRequestParams {}
message AssignUserAccessPolicyRequestBody {
  repeated string access_policy_ids = 1;
}
message AssignUserAccessPolicyRequest {
  AssignUserAccessPolicyRequestPath path = 1;
  AssignUserAccessPolicyRequestParams params = 2;
  AssignUserAccessPolicyRequestBody body = 3;
}

// 3.7 Assign NFC Card to User
message AssignUserNfcCardRequestPath { string id = 1; }
message AssignUserNfcCardRequestParams {}
message AssignUserNfcCardRequestBody {
  string token = 1;   // token of the nfc card
  bool force_add = 2; // determine whether to overwrite an NFC card that has
                      // already been assigned.
}
message AssignUserNfcCardRequest {
  AssignUserNfcCardRequestPath path = 1;
  AssignUserNfcCardRequestParams params = 2;
  AssignUserNfcCardRequestBody body = 3;
}

// 3.8 Unassign NFC Card from User
message UnassignUserNfcCardRequestPath { string id = 1; }
message UnassignUserNfcCardRequestParams {}
message UnassignUserNfcCardRequestBody { string token = 1; }
message UnassignUserNfcCardRequest {
  UnassignUserNfcCardRequestPath path = 1;
  UnassignUserNfcCardRequestParams params = 2;
  UnassignUserNfcCardRequestBody body = 3;
}

// 3.9 Assign PIN Code to User
message AssignUserPinCodeRequestPath { string id = 1; }
message AssignUserPinCodeRequestParams {}
message AssignUserPinCodeRequestBody { string pin_code = 1; }
message AssignUserPinCodeRequest {
  AssignUserPinCodeRequestPath path = 1;
  AssignUserPinCodeRequestParams params = 2;
  AssignUserPinCodeRequestBody body = 3;
}

// 3.10 Unassign PIN Code to User
message UnassignUserPinCodeRequestPath { string id = 1; }
message UnassignUserPinCodeRequestParams {}
message UnassignUserPinCodeRequestBody {}
message UnassignUserPinCodeRequest {
  AssignUserPinCodeRequestPath path = 1;
  AssignUserPinCodeRequestParams params = 2;
  UnassignUserPinCodeRequestBody body = 3;
}

// 3.11 Create User Group
message CreateUserGroupRequestPath {}
message CreateUserGroupRequestParams {}
message CreateUserGroupRequestBody {
  string name = 1;  // name of the group
  string up_id = 2; // parent group ID, get from /api/v1/developer/user_groups
}
message CreateUserGroupRequest {
  CreateUserGroupRequestPath path = 1;
  CreateUserGroupRequestParams params = 2;
  CreateUserGroupRequestBody body = 3;
}

// 3.12 Fetch All User Groups
message FetchAllUserGroupsRequestPath {}
message FetchAllUserGroupsRequestParams {}
message FetchAllUserGroupsRequestBody {}
message FetchAllUserGroupsRequest {
  FetchAllUserGroupsRequestPath path = 1;
  FetchAllUserGroupsRequestParams params = 2;
  FetchAllUserGroupsRequestBody body = 3;
}

// 3.13 Fetch User Group
message FetchUserGroupRequestPath { string id = 1; }
message FetchUserGroupRequestParams {}
message FetchUserGroupRequestBody {}
message FetchUserGroupRequest {
  FetchUserGroupRequestPath path = 1;
  FetchUserGroupRequestParams params = 2;
  FetchUserGroupRequestBody body = 3;
}

// 3.14 Update User Group
message UpdateUserGroupRequestPath { string id = 1; }
message UpdateUserGroupRequestParams {}
message UpdateUserGroupRequestBody {
  string name = 1;  // name of the group
  string up_id = 2; // parent group ID, get from /api/v1/developer/user_groups
}
message UpdateUserGroupRequest {
  UpdateUserGroupRequestPath path = 1;
  UpdateUserGroupRequestParams params = 2;
  UpdateUserGroupRequestBody body = 3;
}

// 3.15 Delete User Group
message DeleteUserGroupRequestPath { string id = 1; }
message DeleteUserGroupRequestParams {}
message DeleteUserGroupRequestBody {}
message DeleteUserGroupRequest {
  DeleteUserGroupRequestPath path = 1;
  DeleteUserGroupRequestParams params = 2;
  DeleteUserGroupRequestBody body = 3;
}

// 3.16 Assign User to User Group
message AssignUserToUserGroupRequestPath {
  string id = 1; // Get it from the API, /api/v1/developer/user_groups
}
message AssignUserToUserGroupRequestParams {}
message AssignUserToUserGroupRequestBody {
  repeated string user_id = 1; // Get it from the API, /api/v1/developer/users
  // The api documentation reads as a method for one user ID, but the repeated
  // string implies that it may support multiple user IDs at once.
}
message AssignUserToUserGroupRequest {
  AssignUserToUserGroupRequestPath path = 1;
  AssignUserToUserGroupRequestParams params = 2;
  AssignUserToUserGroupRequestBody body = 3;
}

// 3.17 Unassign User from User Group
message UnassignUserFromUserGroupRequestPath {
  string id = 1; // Identify ID of the user group
}
message UnassignUserFromUserGroupRequestParams {}
message UnassignUserFromUserGroupRequestBody {
  repeated string user_id = 1; // Get it from the API, /api/v1/developer/users
  // The api documentation reads as a method for one user ID, but the repeated
  // string implies that it may support multiple user IDs at once.
}
message UnassignUserFromUserGroupRequest {
  UnassignUserFromUserGroupRequestPath path = 1;
  UnassignUserFromUserGroupRequestParams params = 2;
  UnassignUserFromUserGroupRequestBody body = 3;
}

// 3.18 Fetch Users in a User Group
message FetchUsersInUserGroupRequestPath {
  string id = 1; // Identify ID of the user group
}
message FetchUsersInUserGroupRequestParams {}
message FetchUsersInUserGroupRequestBody {}
message FetchUsersInUserGroupRequest {
  FetchUsersInUserGroupRequestPath path = 1;
  FetchUsersInUserGroupRequestParams params = 2;
  FetchUsersInUserGroupRequestBody body = 3;
}

// 3.19 Fetch All Users in a User Group, including subgroups
message FetchAllUsersInUserGroupRequestPath {
  string id = 1; // Identify ID of the user group
}
message FetchAllUsersInUserGroupRequestParams {}
message FetchAllUsersInUserGroupRequestBody {}
message FetchAllUsersInUserGroupRequest {
  FetchAllUsersInUserGroupRequestPath path = 1;
  FetchAllUsersInUserGroupRequestParams params = 2;
  FetchAllUsersInUserGroupRequestBody body = 3;
}

// 3.20 Fetch the Access Policies Assigned to a User
message FetchUserAccessPoliciesRequestPath {
  string id = 1; // Identify ID of the user
}
message FetchUserAccessPoliciesRequestParams {
  bool only_user_policies = 1;
  // False: all policies of the group the user belongs to are shown.
  // True: only the policies assigned directly to the user are shown.
}
message FetchUserAccessPoliciesRequestBody {}
message FetchUserAccessPoliciesRequest {
  FetchUserAccessPoliciesRequestPath path = 1;
  FetchUserAccessPoliciesRequestParams params = 2;
  FetchUserAccessPoliciesRequestBody body = 3;
}

// 3.21 Assign Access Policy to User Group
message AssignUserGroupAccessPolicyRequestPath {
  string id = 1; // Identity ID of the user group. Get it from the API,
                 // /api/v1/developer/user_groups
}
message AssignUserGroupAccessPolicyRequestParams {}
message AssignUserGroupAccessPolicyRequestBody {
  repeated string access_policy_ids =
      1; // Identity ID of the access policy. Get it from the API,
         // /api/v1/developer/access_policies
}
message AssignUserGroupAccessPolicyRequest {
  AssignUserGroupAccessPolicyRequestPath path = 1;
  AssignUserGroupAccessPolicyRequestParams params = 2;
  AssignUserGroupAccessPolicyRequestBody body = 3;
}

// 3.22 Fetch the Access Policies Assigned to a User Group
message FetchUserGroupAccessPoliciesRequestPath {
  string id = 1; // Identity ID of the user group. Get it from the API,
                 // /api/v1/developer/user_groups
}
message FetchUserGroupAccessPoliciesRequestParams {}
message FetchUserGroupAccessPoliciesRequestBody {}
message FetchUserGroupAccessPoliciesRequest {
  FetchUserGroupAccessPoliciesRequestPath path = 1;
  FetchUserGroupAccessPoliciesRequestParams params = 2;
  FetchUserGroupAccessPoliciesRequestBody body = 3;
}

// ---------

message User {
  string id = 1;
  string first_name = 2;
  string last_name = 3;
  string full_name = 4;
  string alias = 5;
  string user_email = 6;
  string email_status = 7;
  string phone = 8;
  string employee_number = 9;
  int64 onboard_time = 10;
  repeated shared.NFC_Card nfc_cards = 11;
  shared.PIN_Code pin_code = 12;
  repeated string access_policy_ids = 13;
  repeated access_policy.AccessPolicy access_policies = 14;
  Status status = 15;
}

message UserResponse {
  string code = 1;
  string msg = 2;
  User data = 3;
}

message UsersResponse {
  string code = 1;
  string msg = 2;
  repeated User data = 3;
}

message UserGroup {
  string full_name = 1;
  string id = 2;
  string name = 3;
  string up_id = 4;
  repeated string up_ids = 5;
}

message UserGroupResponse {
  string code = 1;
  UserGroup data = 2;
  string msg = 3;
}

message UserGroupsResponse {
  string code = 1;
  repeated UserGroup data = 2;
  string msg = 3;
}

enum Status {
  ACTIVE = 0;
  PENDING = 1;
  DEACTIVATED = 2;
}